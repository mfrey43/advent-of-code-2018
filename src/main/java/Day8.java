import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.time.StopWatch;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Day8 {

  public static void main(String[] args) throws IOException {
    StopWatch stopwatch = new StopWatch();
    stopwatch.start();
    System.out.println(new Day8().part1());
    stopwatch.stop();
    System.out.println("time spent: " + stopwatch.getTime() + "ms");

    stopwatch.reset();
    stopwatch.start();
    System.out.println(new Day8().part2());
    stopwatch.stop();
    System.out.println("time spent: " + stopwatch.getTime() + "ms");
  }

  public String part1() throws IOException {
    String input = IOUtils.toString(getClass().getResourceAsStream("input_day_08.txt"), StandardCharsets.UTF_8);
    int[] number = Arrays.stream(input.split("\\s")).map(String::trim).mapToInt(Integer::parseInt).toArray();

    Node root = new Node(number, 0);

    return String.valueOf(root.sumOfMetadataEntries());
  }

  public String part2() throws IOException {
    String input = IOUtils.toString(getClass().getResourceAsStream("input_day_08.txt"), StandardCharsets.UTF_8);
    int[] number = Arrays.stream(input.split("\\s")).map(String::trim).mapToInt(Integer::parseInt).toArray();

    Node root = new Node(number, 0);

    return String.valueOf(root.value());
  }

  private static class Node {

    final int[] data;
    final int index;
    final List<Node> children = new ArrayList<>();

    public Node(int[] data, int index) {
      this.data = data;
      this.index = index;

      int nextChildIndex = index + 2;
      for (int i = 0; i < numberOfChildren(); i++) {
        Node child = new Node(data, nextChildIndex);
        children.add(child);
        nextChildIndex += child.length();
      }
    }

    public int numberOfChildren() {
      return data[index];
    }

    public int numberOfMetadataEntries() {
      return data[index + 1];
    }

    public int sumOfMetadataEntries(){
      int mySum = 0;
      int startOfMetadata = index + length() - numberOfMetadataEntries();
      for(int i = startOfMetadata; i < startOfMetadata + numberOfMetadataEntries(); i++){
        mySum += data[i];
      }
      return children.stream().mapToInt(Node::sumOfMetadataEntries).sum() + mySum;
    }

    public int value(){
      if(children.size() == 0){
        return this.sumOfMetadataEntries();
      } else {
        int mySum = 0;
        int startOfMetadata = index + length() - numberOfMetadataEntries();
        for(int i = startOfMetadata; i < startOfMetadata + numberOfMetadataEntries(); i++){
          int metadataEntryValue = data[i];
          if(metadataEntryValue > 0 && metadataEntryValue <= children.size()){
            mySum += children.get(metadataEntryValue - 1).value();
          }
        }
        return mySum;
      }
    }

    public int length() {
      return 2 + children.stream().mapToInt(Node::length).sum() + numberOfMetadataEntries();
    }
  }
}
