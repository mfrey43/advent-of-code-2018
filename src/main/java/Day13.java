import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.time.StopWatch;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Day13 {

  public static final char UP = '^';
  public static final char LEFT = '<';
  public static final char RIGHT = '>';
  public static final char DOWN = 'v';

  public static void main(String[] args) throws IOException {
    StopWatch stopwatch = new StopWatch();
    stopwatch.start();
    System.out.println(new Day13().part1());
    stopwatch.stop();
    System.out.println("time spent: " + stopwatch.getTime() + "ms");

    stopwatch.reset();
    stopwatch.start();
    System.out.println(new Day13().part2());
    stopwatch.stop();
    System.out.println("time spent: " + stopwatch.getTime() + "ms");
  }

  public String part1() throws IOException {
    String input = IOUtils.toString(getClass().getResourceAsStream("input_day_13.txt"), StandardCharsets.UTF_8)
        .replaceAll("\r", "");

    String[] lines = input.split("\n");
    int width = lines[0].length();
    int height = lines.length;

    char[][] grid = new char[height][width];
    List<Cart> carts = new ArrayList<>();

    for (int y = 0; y < lines.length; y++) {
      grid[y] = lines[y].toCharArray();
      for (int x = 0; x < grid[y].length; x++) {
        char character = grid[y][x];
        if (character == UP || character == LEFT || character == RIGHT || character == DOWN) {
          carts.add(new Cart(x, y, character, grid));
        }
      }
    }

    while (true) {
      carts.sort((o1, o2) -> {
        if (o1.y == o2.y) {
          return o1.x - o2.x;
        }
        return o1.y - o2.y;
      });
      for (Cart cart : carts) {
        cart.step();
        for (Cart otherCart : carts) {
          if (cart != otherCart && cart.x == otherCart.x && cart.y == otherCart.y) {
            return cart.x + "," + cart.y;
          }
        }
      }
    }
  }

  public String part2() throws IOException {
    String input = IOUtils.toString(getClass().getResourceAsStream("input_day_13.txt"), StandardCharsets.UTF_8)
        .replaceAll("\r", "");

    String[] lines = input.split("\n");
    int width = lines[0].length();
    int height = lines.length;

    char[][] grid = new char[height][width];
    List<Cart> carts = new ArrayList<>();

    for (int y = 0; y < lines.length; y++) {
      grid[y] = lines[y].toCharArray();
      for (int x = 0; x < grid[y].length; x++) {
        char character = grid[y][x];
        if (character == UP || character == LEFT || character == RIGHT || character == DOWN) {
          carts.add(new Cart(x, y, character, grid));
        }
      }
    }

    while (true) {
      carts.sort((o1, o2) -> {
        if (o1.y == o2.y) {
          return o1.x - o2.x;
        }
        return o1.y - o2.y;
      });
      for (Cart cart : carts) {
        if (cart.removed) {
          continue;
        }
        cart.step();
        for (Cart otherCart : carts) {
          if (cart != otherCart && cart.x == otherCart.x && cart.y == otherCart.y) {
            cart.removed = true;
            otherCart.removed = true;
            break;
          }
        }
      }
      carts = carts.stream().filter(cart -> !cart.removed).collect(Collectors.toList());
      if (carts.size() == 1) {
        Cart lastCart = carts.get(0);
        return lastCart.x + "," + lastCart.y;
      }
    }
  }

  private static class Cart {

    int x;
    int y;
    char character;
    char[][] grid;
    private int turn = 0;
    boolean removed = false;

    public Cart(int x, int y, char character, char[][] grid) {
      this.x = x;
      this.y = y;
      this.character = character;
      this.grid = grid;
    }

    public void step() {
      switch (character) {
        case UP:
          y--;
          break;
        case RIGHT:
          x++;
          break;
        case DOWN:
          y++;
          break;
        case LEFT:
          x--;
          break;
      }
      char track = grid[y][x];
      switch (track) {
        case '/':
          switch (character) {
            case UP:
              character = RIGHT;
              break;
            case RIGHT:
              character = UP;
              break;
            case DOWN:
              character = LEFT;
              break;
            case LEFT:
              character = DOWN;
              break;
          }
          break;
        case '\\':
          switch (character) {
            case UP:
              character = LEFT;
              break;
            case RIGHT:
              character = DOWN;
              break;
            case DOWN:
              character = RIGHT;
              break;
            case LEFT:
              character = UP;
              break;
          }
          break;
        case '+':
          switch (turn) {
            case 0:
              switch (character) {
                case UP:
                  character = LEFT;
                  break;
                case RIGHT:
                  character = UP;
                  break;
                case DOWN:
                  character = RIGHT;
                  break;
                case LEFT:
                  character = DOWN;
                  break;
              }
              break;
            case 1:
              break;
            case 2:
              switch (character) {
                case UP:
                  character = RIGHT;
                  break;
                case RIGHT:
                  character = DOWN;
                  break;
                case DOWN:
                  character = LEFT;
                  break;
                case LEFT:
                  character = UP;
                  break;
              }
              break;
          }
          turn = (turn + 1) % 3;
          break;
      }
    }
  }
}
