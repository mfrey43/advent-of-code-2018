import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.lang.time.StopWatch;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Day09 {

  public static final int NUM_PLAYERS_TEST = 9;
  public static final int LAST_MARBLE_TEST = 25;
  public static final int NUM_PLAYERS = 426;
  public static final int LAST_MARBLE = 72058;

  public static void main(String[] args) throws IOException {
    StopWatch stopwatch = new StopWatch();
    stopwatch.start();
    System.out.println(new Day09().part1());
    stopwatch.stop();
    System.out.println("time spent: " + stopwatch.getTime() + "ms");

    stopwatch.reset();
    stopwatch.start();
    System.out.println(new Day09().part2());
    stopwatch.stop();
    System.out.println("time spent: " + stopwatch.getTime() + "ms");
  }

  public String part1() {
    return String.valueOf(calculateHighScore(NUM_PLAYERS_TEST, LAST_MARBLE_TEST));
  }

  public String part2() {
    return String.valueOf(calculateHighScore(NUM_PLAYERS, LAST_MARBLE * 100));
  }

  int slowCalculateHighScore(int numPlayers, int lastMarble) {
    int currentMarbleIndex = 0;
    List<Integer> list = new ArrayList<>();
    list.add(0);

    int[] playerScores = new int[numPlayers];
    int currentPlayer = 0;
    for (int i = 1; i <= lastMarble; i++) {
      int indexToInsert = (currentMarbleIndex + 2) % list.size();
      if (indexToInsert == 0) {
        indexToInsert = list.size();
      }
      if (i % 23 == 0) {
        currentMarbleIndex = Math.floorMod((currentMarbleIndex - 7), list.size());
        playerScores[currentPlayer] = playerScores[currentPlayer] + i + list.get(currentMarbleIndex);
        list.remove(currentMarbleIndex);
      } else {
        list.add(indexToInsert, i);
        currentMarbleIndex = indexToInsert;
      }
      currentPlayer = (currentPlayer + 1) % numPlayers;
    }

    return Arrays.stream(playerScores).max().getAsInt();
  }

  long calculateHighScore(int numPlayers, int lastMarble) {
    MarbleList list = new MarbleList();

    long[] playerScores = new long[numPlayers];
    int currentPlayer = 0;
    for (int i = 1; i <= lastMarble; i++) {
      list.add(i);
      if (i % 23 == 0) {
        playerScores[currentPlayer] = playerScores[currentPlayer] + i + list.lastRemoved.value;
      }
      currentPlayer = (currentPlayer + 1) % numPlayers;
    }

    return Arrays.stream(playerScores).max().getAsLong();
  }

  private static class MarbleList {

    Marble currentMarble;
    Marble lastRemoved;

    public MarbleList() {
      currentMarble = new Marble(0);
      currentMarble.next = currentMarble;
      currentMarble.previous = currentMarble;
    }

    void add(int i) {
      if (i % 23 == 0) {
        for(int k = 0; k < 6; k++){
          currentMarble = currentMarble.previous;
        }
        lastRemoved = currentMarble.previous;
        currentMarble.previous = currentMarble.previous.previous;
        currentMarble.previous.next = currentMarble;
      } else {
        Marble marble = new Marble(i);
        marble.next = currentMarble.next.next;
        marble.next.previous = marble;
        marble.previous = currentMarble.next;
        marble.previous.next = marble;
        if (currentMarble.previous == currentMarble) {
          currentMarble.previous = marble;
        }
        currentMarble = marble;
      }
    }

    private static class Marble {

      Marble next;
      Marble previous;
      final int value;

      public Marble(int value) {
        this.value = value;
      }
    }
  }
}

/*
ArrayList slowCalculateHighScore
424112
time spent: 92ms

LinkedList slowCalculateHighScore
424112
time spent: 1337ms
*/


/*
int slowCalculateHighScore(int numPlayers, int lastMarble) {
    int currentMarbleIndex = 0;
    List<Integer> list = new LinkedList<>();
    list.add(0);

    int[] playerScores = new int[numPlayers];
    int currentPlayer = 0;
    for (int i = 1; i <= lastMarble; i++) {
      int indexToInsert = (currentMarbleIndex + 2) % list.size();
      if (indexToInsert == 0) {
        indexToInsert = list.size();
      }
      if (i % 23 == 0) {
        currentMarbleIndex = Math.floorMod((currentMarbleIndex - 7), list.size());
        playerScores[currentPlayer] = playerScores[currentPlayer] + i + list.get(currentMarbleIndex);
        list.remove(currentMarbleIndex);
      } else {
        list.add(indexToInsert, i);
        currentMarbleIndex = indexToInsert;
      }
      currentPlayer = (currentPlayer + 1) % numPlayers;
    }

    return Arrays.stream(playerScores).max().getAsInt();
  }
 */