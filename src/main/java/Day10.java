import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.time.StopWatch;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Day10 {

  int steps = 10438;

  public static void main(String[] args) throws IOException {
    StopWatch stopwatch = new StopWatch();
    stopwatch.start();
    System.out.println(new Day10().part1());
    stopwatch.stop();
    System.out.println("time spent: " + stopwatch.getTime() + "ms");

    stopwatch.reset();
    stopwatch.start();
    System.out.println(new Day10().part2());
    stopwatch.stop();
    System.out.println("time spent: " + stopwatch.getTime() + "ms");
  }

  public String part1() throws IOException {
    String input = IOUtils.toString(getClass().getResourceAsStream("input_day_10.txt"), StandardCharsets.UTF_8)
        .replaceAll("\r", "");

    List<Point> points = Arrays.stream(input.split("\n")).map(line -> {
      String[] split1 = line.split("=<");
      String[] left = split1[1].split(">")[0].split(",");
      String[] right = split1[2].split(">")[0].split(",");
      return new Point(Integer.parseInt(left[0].trim()), Integer.parseInt(left[1].trim()),
          Integer.parseInt(right[0].trim()), Integer.parseInt(right[1].trim()));
    }).collect(Collectors.toList());

    int seconds = 0;
    int lastVerticalHeight = Integer.MAX_VALUE;
    while (true) {
      points.forEach(Point::step);

      int top = points.stream().min(Comparator.comparingInt(o -> o.posY)).get().posY;
      int bottom = points.stream().min((o1, o2) -> o2.posY - o1.posY).get().posY;

      int verticalHeight = bottom - top;
      if (verticalHeight > lastVerticalHeight) {
        break;
      }
      seconds++;
      lastVerticalHeight = verticalHeight;
    }

    points.forEach(Point::stepBack);
    int top = points.stream().min(Comparator.comparingInt(o -> o.posY)).get().posY;
    int left = points.stream().min(Comparator.comparingInt(o -> o.posX)).get().posX;
    int right = points.stream().min((o1, o2) -> o2.posX - o1.posX).get().posX;
    int bottom = points.stream().min((o1, o2) -> o2.posY - o1.posY).get().posY;

    boolean[][] matrix = new boolean[bottom - top + 1][right - left + 1];
    points.forEach(point -> {
      matrix[point.posY - top][point.posX - left] = true;
    });

    for (boolean[] aMatrix : matrix) {
      for (int k = 0; k < aMatrix.length; k++) {
        System.out.print(aMatrix[k] ? "X" : " ");
      }
      System.out.print("\n");
    }


    return seconds + " seconds";
  }

  public String part2() throws IOException {
    String input = IOUtils.toString(getClass().getResourceAsStream("input_day_10.txt"), StandardCharsets.UTF_8)
        .replaceAll("\r", "");

    return "TODO";
  }

  private static class Point {

    int posX;
    int posY;
    int velX;
    int velY;

    public Point(int posX, int posY, int velX, int velY) {
      this.posX = posX;
      this.posY = posY;
      this.velX = velX;
      this.velY = velY;
    }

    public void step() {
      posX += velX;
      posY += velY;
    }

    public void stepBack() {
      posX -= velX;
      posY -= velY;
    }
  }
}
