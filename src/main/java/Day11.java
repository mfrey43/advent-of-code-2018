import java.util.Comparator;
import java.util.stream.IntStream;

import org.apache.commons.lang.time.StopWatch;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Day11 {

  public static final int INPUT = 7803;
  public static final int GRID_SIZE = 300;

  public static void main(String[] args) {
    StopWatch stopwatch = new StopWatch();
    stopwatch.start();
    System.out.println(new Day11().part1());
    stopwatch.stop();
    System.out.println("time spent: " + stopwatch.getTime() + "ms");

    stopwatch.reset();
    stopwatch.start();
    System.out.println(new Day11().part2());
    stopwatch.stop();
    System.out.println("time spent: " + stopwatch.getTime() + "ms");
  }

  public String part1() {
    int[][] grid = buildGrid(INPUT);
    return findBestTopLeftCell3(grid);
  }

  public String part2() {
    int[][] grid = buildGrid(INPUT);
    return findBestTopLeftCellAllSizes(grid);
  }

  public int[][] buildGrid(int serialNumber) {
    int[][] grid = new int[GRID_SIZE][GRID_SIZE];

    for (int i = 0; i < grid.length; i++) {
      for (int k = 0; k < grid[i].length; k++) {
        int x = k + 1;
        int y = i + 1;
        int rackId = x + 10;
        int powerLevel = rackId * y + serialNumber;
        powerLevel *= rackId;
        powerLevel = (powerLevel / 100) % 10 - 5;
        grid[i][k] = powerLevel;
      }
    }

    return grid;
  }

  public String findBestTopLeftCell3(int[][] grid) {
    Cell cell = findBestTopLeftCellForSize(grid, 3);
    return cell.x + "," + cell.y;
  }

  public String findBestTopLeftCellAllSizes(final int[][] grid) {
    Cell best = IntStream.range(1, GRID_SIZE).parallel().mapToObj(i -> findBestTopLeftCellForSize(grid, i)).max(
        Comparator.comparingInt(o -> o.value)).get();
    return best.x + "," + best.y + "," + best.size;
  }

  private Cell findBestTopLeftCellForSize(int[][] grid, int size) {
    Cell best = null;
    for (int i = 0; i < grid.length - (size - 1); i++) {
      for (int k = 0; k < grid[i].length - (size - 1); k++) {
        int value = calculateValue(grid, k, i, size);
        if(best == null || value > best.value){
          best = new Cell(k + 1, i + 1, value, size);
        }
      }
    }
    return best;
  }

  private int calculateValue(int[][] grid, int x, int y, int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
      for (int k = 0; k < size; k++) {
        sum += grid[y + i][x + k];
      }
    }
    return sum;
  }

  static class Cell {
    int x;
    int y;
    int value;
    int size;

    public Cell(int x, int y, int value, int size) {
      this.x = x;
      this.y = y;
      this.value = value;
      this.size = size;
    }
  }
}