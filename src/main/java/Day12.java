import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.time.StopWatch;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Day12 {

  public static void main(String[] args) throws IOException {
    StopWatch stopwatch = new StopWatch();
    stopwatch.start();
    System.out.println(new Day12().part1());
    stopwatch.stop();
    System.out.println("time spent: " + stopwatch.getTime() + "ms");

    stopwatch.reset();
    stopwatch.start();
    System.out.println(new Day12().part2());
    stopwatch.stop();
    System.out.println("time spent: " + stopwatch.getTime() + "ms");
  }

  public String part1() throws IOException {
    String input = IOUtils.toString(getClass().getResourceAsStream("input_day_12.txt"), StandardCharsets.UTF_8)
        .replaceAll("\r", "");

    return afterGens(input, 20);
  }

  public String part2() throws IOException {
    String input = IOUtils.toString(getClass().getResourceAsStream("input_day_12.txt"), StandardCharsets.UTF_8)
        .replaceAll("\r", "");

    System.out.println(afterGens(input, 119)); // 7973
    System.out.println(afterGens(input, 120));
    System.out.println(afterGens(input, 121));
    System.out.println(afterGens(input, 122)); // + 67

    return String.valueOf(7973 + (50000000000L - 119) * 67); // I feel so dirty
  }

  public String afterGens(String input, long numberOfGens) {
    String[] lines = input.split("\n");

    String[] initial = lines[0].split(":")[1].trim().split("");
    boolean[] pots = new boolean[initial.length * 4];

    int zeroIndex = pots.length / 2 - initial.length / 2;
    for (int i = 0; i < initial.length; i++) {
      pots[zeroIndex + i] = "#".equals(initial[i]);
    }

    List<boolean[]> rules = new ArrayList<>();
    for (int i = 2; i < lines.length; i++) {
      String[] split = lines[i].split("=>");
      if (split[1].trim().equals("#")) {
        boolean[] rule = new boolean[5];
        rule[0] = split[0].charAt(0) == '#';
        rule[1] = split[0].charAt(1) == '#';
        rule[2] = split[0].charAt(2) == '#';
        rule[3] = split[0].charAt(3) == '#';
        rule[4] = split[0].charAt(4) == '#';
        rules.add(rule);
      }
    }

    int startIndex = zeroIndex - 4;
    int endIndex = zeroIndex + initial.length + 4;

    boolean[] potsLastGen = pots;

    for (int gen = 0; gen < numberOfGens; gen++) {
      /*
      for (boolean b : potsLastGen) {
        if (b) {
          System.out.print("#");
        } else {
          System.out.print(".");
        }
      }
      System.out.print("\n");
      */
      boolean[] potsThisGen = new boolean[potsLastGen.length];
      for (int i = startIndex; i < endIndex; i++) {
        boolean matched = false;
        for (boolean[] rule : rules) {
          if (positionMatches(potsLastGen, i, rule)) {
            matched = true;
          }
        }
        if (matched) {
          startIndex = Math.min(startIndex, i - 4);
          endIndex = Math.max(endIndex, i + 4);
          potsThisGen[i] = true;
        }
      }
      potsLastGen = potsThisGen;
    }

    int sum = 0;
    for (int i = 0; i < potsLastGen.length; i++) {
      if (potsLastGen[i]) {
        sum += i - zeroIndex;
      }
    }

    return String.valueOf(sum);
  }

  public boolean positionMatches(boolean[] pots, int index, boolean[] rule) {
    boolean matches = true;
    for (int i = 0; i < 5; i++) {
      if (!(pots[index + i - 2] == rule[i])) {
        matches = false;
      }
    }
    return matches;
  }
}
